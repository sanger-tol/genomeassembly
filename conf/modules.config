/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

params {
    timestamp = (new Date()).format("yyyyMMdd")
    hifiasm = "hifiasm.${params.timestamp}"
    hifiasmhic = "hifiasm-hic.${params.timestamp}"
}

process {

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/genomeassembly_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // Set up of kmer profile
    withName: FASTK_FASTK {
        ext.args   = "-k31 -t -P."
        publishDir = [
            path: { "${params.outdir}/kmer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTK_HISTEX {
        ext.args = "-G"
        publishDir = [
            path: { "${params.outdir}/kmer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: GENESCOPEFK {
        ext.args = "-k31"
        publishDir = [
            path: { "${params.outdir}/kmer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // End of Set up of kmer profile

    // Set up of the raw assembly pipeline
    withName: HIFIASM_PRI {
        ext.args = "--primary"
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*RAW_ASSEMBLY:GFA_TO_FASTA_PRI' {
        ext.prefix = { "${meta.id}.asm.p_ctg" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*RAW_ASSEMBLY:GFA_TO_FASTA_ALT' {
        ext.prefix = { "${meta.id}.asm.a_ctg" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*GENOME_STATISTICS_RAW:GFASTATS_PRI' {
        ext.prefix = { "${meta.id}.asm.p_ctg" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}" },
            mode: params.publish_dir_mode,
            pattern: '*assembly_summary'
        ]
    }

    withName: '.*GENOME_STATISTICS_RAW:GFASTATS_HAP' {
        ext.prefix = { "${meta.id}.asm.a_ctg" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}" },
            mode: params.publish_dir_mode,
            pattern: '*assembly_summary'
        ]
    }

    withName: '.*GENOME_STATISTICS_RAW:BUSCO' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/${meta.id}.p_ctg.${meta.lineage}.busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('busco.log') ? filename :
                    filename.endsWith('full_table.tsv') ? filename :
                    filename.endsWith('missing_busco_list.tsv') ? filename :
                    filename.startsWith('short_summary') ? filename :
                    filename.endsWith('busco.batch_summary.txt') ? filename :
                    null }
        ]
    }

    withName: '.*GENOME_STATISTICS_RAW:MERQURYFK_MERQURYFK' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/${meta.id}.p_ctg.ccs.merquryk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (params.hifiasm_hic_on) {
        withName: HIFIASM_HIC {
            ext.args = "--primary"
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: '.*RAW_ASSEMBLY:GFA_TO_FASTA_PRI_HIC' {
            ext.prefix = { "${meta.id}.asm.hic.p_ctg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*RAW_ASSEMBLY:GFA_TO_FASTA_ALT_HIC' {
            ext.prefix = { "${meta.id}.asm.hic.a_ctg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*RAW_ASSEMBLY:GFA_TO_FASTA_.*HIC' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: '.*GENOME_STATISTICS_RAW_HIC:GFASTATS_PRI' {
            ext.prefix = { "${meta.id}.asm.hic.p_ctg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}" },
                mode: params.publish_dir_mode,
                pattern: '*assembly_summary'
            ]
        }

        withName: '.*GENOME_STATISTICS_RAW_HIC:GFASTATS_HAP' {
            ext.prefix = { "${meta.id}.asm.hic.a_ctg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}" },
                mode: params.publish_dir_mode,
                pattern: '*assembly_summary'
            ]
        }
        withName: '.*GENOME_STATISTICS_RAW_HIC:BUSCO' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}/${meta.id}.p_ctg.${meta.lineage}.busco" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('busco.log') ? filename :
                        filename.endsWith('full_table.tsv') ? filename :
                        filename.endsWith('missing_busco_list.tsv') ? filename :
                        filename.startsWith('short_summary') ? filename :
                        filename.endsWith('busco.batch_summary.txt') ? filename :
                        null }
            ]
        }

        withName: '.*GENOME_STATISTICS_RAW_HIC:MERQURYFK_MERQURYFK' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasmhic}/${meta.id}.p_ctg.ccs.merquryk" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // End of Set up of the raw assembly pipeline

    // Set up of organelles pipeline

    if (params.organelles_on) {
        withName: '.*MITOHIFI_MITOHIFI_READS' {
            ext.args2 = '-r'
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/mito.reads" },
                mode: 'copyNoFollow',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*MITOHIFI_MITOHIFI_CONTIGS' {
            ext.args2 = '-c'
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/mito" },
                mode: 'copyNoFollow',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: '.*ORGANELLES:OATK' {
            ext.args = "-k1001 -c90 -Ttmp"
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/oatk" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    // End of set up of organelles pipeline

    // Set up of the purging pipeline

    withName: '.*PURGE_DUPS:MINIMAP2_ALIGN_READS' {
        //these options are from pbmm2 CSS preset
        ext.args = "-k19 -w10 -O5,56 -E4,1 -A2 -B5 -z400,50 -r2000 --lj-min-ratio 0.5"
        ext.prefix = { "${meta.id}.reads" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/coverage" },
            mode: params.publish_dir_mode,
            pattern: ".*paf"
        ]
    }

    withName: '.*PURGE_DUPS:PURGEDUPS_PBCSTAT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PURGE_DUPS:GET_CALCUTS_PARAMS' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PURGE_DUPS:PURGEDUPS_CALCUTS' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PURGE_DUPS:PURGEDUPS_SPLITFA' {
        ext.prefix = "self_aln"
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/split_aln" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PURGE_DUPS:MINIMAP2_ALIGN_ASSEMBLY' {
        ext.args   = "-xasm5 -DP"
        ext.prefix = "self_aln"
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/split_aln" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PURGE_DUPS:PURGEDUPS_PURGEDUPS' {
        ext.args   = "-2"
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/purge_dups" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PURGE_DUPS:PURGEDUPS_GETSEQS' {
        ext.prefix = { "${meta.prefix}" }
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.contains('purged.fa') ? 'purged.fa' : null }
            ]
        ]
    }

    withName: '.*CAT_CAT_HAPLOTIGS' {
        ext.prefix = { "purged.htigs.all.fa" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/" },
            mode: params.publish_dir_mode,
            pattern: '*purged.htigs.all.fa'
        ]
    }

    withName: '.*GENOME_STATISTICS_PURGED:GFASTATS_PRI' {
        ext.prefix = { "purged" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging" },
            mode: params.publish_dir_mode,
            pattern: '*assembly_summary'
        ]
    }

    withName: '.*GENOME_STATISTICS_PURGED:GFASTATS_HAP' {
        ext.prefix = { "purged.htigs.all" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging" },
            mode: params.publish_dir_mode,
            pattern: '*assembly_summary'
        ]
    }

    withName: '.*GENOME_STATISTICS_PURGED:BUSCO' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/${meta.id}.purged.${meta.lineage}.busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('busco.log') ? filename :
                    filename.endsWith('full_table.tsv') ? filename :
                    filename.endsWith('missing_busco_list.tsv') ? filename :
                    filename.startsWith('short_summary') ? filename :
                    filename.endsWith('busco.batch_summary.txt') ? filename :
                    null }
        ]
    }

    withName: '.*GENOME_STATISTICS_PURGED:MERQURYFK_MERQURYFK' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/purging/${meta.id}.purged.ccs.merquryk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // End of Set up of the purging pipeline


    // Set up of the polishing pipeline
    if (params.polishing_on) {
        withName: LONGRANGER_MKREF {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: LONGRANGER_ALIGN {
            // Keep in sync with `longranger_lsf_sanger.config`
            ext.args = "--disable-ui --nopreflight"
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: BED_CHUNKS {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing/chunks" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: MERGE_FREEBAYES {
            ext.prefix = 'merged'
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing/" },
                mode: params.publish_dir_mode,
                pattern: "*merged*"
            ]
        }

        withName: BCFTOOLS_CONSENSUS {
            // Filter by mapping quality, keep alt-alt het and alt-alt hom,
            // keep longer allele
            ext.args = '-i\'QUAL>1 && (GT="AA" || GT="Aa")\' -Hla'
            ext.prefix = { "${meta.id}.consensus" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: BCFTOOLS_INDEX {
            ext.args = '--tbi'
        }

        withName: BCFTOOLS_VIEW {
            // Dont keep command line information, keep reference allele or
            // suggested alternative if reference is N
            ext.args = '--no-version -e\'type="ref"||REF~"N"\''
        }

        withName: BCFTOOLS_NORM {
            ext.args = '--no-version'
        }

        withName: BCFTOOLS_SORT {
            scratch = true
        }

        withName: SEQTK_SUBSEQ_PRIMARY {
            ext.prefix = 'primary'
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : "primary.fa" }
            ]
        }

        withName: SEQTK_SUBSEQ_HAPLOTIGS {
            ext.prefix = 'haplotigs'
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : "haplotigs.fa" }
            ]
        }

        withName: '.*GENOME_STATISTICS_POLISHED:GFASTATS_PRI' {
            ext.prefix = { "primary" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing" },
                mode: params.publish_dir_mode,
                pattern: '*assembly_summary'
            ]
        }

        withName: '.*GENOME_STATISTICS_POLISHED:GFASTATS_HAP' {
            ext.prefix = { "haplotigs" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing" },
                mode: params.publish_dir_mode,
                pattern: '*assembly_summary'
            ]
        }

        withName: '.*GENOME_STATISTICS_POLISHED:BUSCO' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing/${meta.id}.polished.${meta.lineage}.busco" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('busco.log') ? filename :
                        filename.endsWith('full_table.tsv') ? filename :
                        filename.endsWith('missing_busco_list.tsv') ? filename :
                        filename.startsWith('short_summary') ? filename :
                        filename.endsWith('busco.batch_summary.txt') ? filename :
                        null }
            ]
        }

        withName: '.*GENOME_STATISTICS_POLISHED:MERQURYFK_MERQURYFK' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}.${params.hifiasm}/polishing/${meta.id}.polished.ccs.merquryk" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    // End of Set up of the polishing pipeline


    // Set up of the scaffolding pipeline

    withName: '.*HIC_MAPPING:SAMTOOLS_MARKDUP_HIC_MAPPING' {
        ext.prefix  = { "${meta.id}_mkdup" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*HIC_MAPPING:SAMTOOLS_MERGE_HIC_MAPPING' {
        ext.prefix  = { "${meta.id}_merged" }
    }

    withName: CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT {
        ext.args    = ''
        ext.args1   = '-F0xB00 -nt'
        ext.args2   = { "-5SPCp -H'${rglines}'" }
        ext.args3   = '-mpu'
        ext.args4   = { "-F0xf00 -e 'mapq>=10'" }
        ext.args5   = { '--write-index -l1' }
    }

    withName: CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT {
        ext.args        = ""
        ext.args1       = ""
        ext.args2       = { "-ax sr" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }


    withName: '.*HIC_MAPPING:BAMTOBED_SORT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: '.*HIC_MAPPING:CONVERT_STATS:SAMTOOLS_VIEW' {
        ext.args = "--output-fmt cram"
    }

    withName: '.*HIC_MAPPING:CONVERT_STATS:SAMTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*HIC_MAPPING:CONVERT_STATS:SAMTOOLS_FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*HIC_MAPPING:CONVERT_STATS:SAMTOOLS_IDXSTATS' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Set up of the scffolding pipeline
    withName: 'YAHS' {
        ext.prefix = 'out'
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'COOLER_CLOAD' {
        // Positions in the input file are zero-based;
        // chrom1 field number (one-based) is 2;
        // pos1 field number (one-based) is 3;
        // chrom2 field number (one-based) is 6;
        // pos2 field number (one-based) is 7
        ext.args = 'pairs -0 -c1 2 -p1 3 -c2 6 -p2 7'
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PRETEXTSNAPSHOT' {
        // Make one plot containing all sequences
        ext.args = '--sequences \"=full\"'
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'JUICER_TOOLS_PRE' {
        ext.juicer_tools_jar = 'juicer_tools.1.9.9_jcuda.0.8.jar'
        ext.juicer_jvm_params = '-Xms6g -Xmx48g'
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'JUICER_PRE' {
        ext.args2 = "LC_ALL=C sort -k2,2d -k6,6d -S50G | awk '\$3>=0 && \$7>=0'"
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*GENOME_STATISTICS_SCAFFOLDS:GFASTATS_PRI' {
        ext.prefix = { "${meta.id}_scaffolds_final" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs" },
            mode: params.publish_dir_mode,
            pattern: '*assembly_summary'
        ]
    }

    withName: '.*GENOME_STATISTICS_SCAFFOLDS:BUSCO' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs/out_scaffolds_final.${meta.lineage}.busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('busco.log') ? filename :
                    filename.endsWith('full_table.tsv') ? filename :
                    filename.endsWith('missing_busco_list.tsv') ? filename :
                    filename.startsWith('short_summary') ? filename :
                    filename.endsWith('busco.batch_summary.txt') ? filename :
                    null }
        ]
    }

    withName: '.*GENOME_STATISTICS_SCAFFOLDS:MERQURYFK_MERQURYFK' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}.${params.hifiasm}/scaffolding/yahs/out.break.yahs/out_scaffolds_final.ccs.merquryk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // End of Set up of the scaffolding  pipeline

    //Set up of assembly stats subworkflow
    withName: 'BUSCO' {
        ext.args = "--mode genome"
    }
    //End of Set up of assembly stats subworkflow

}


/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Extra profiles defined to override some of the above parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Importantly, these profiles *cannot* be defined in the main `nextflow.config`,
    otherwise they would be loaded _before_ this `conf/modules.config`.
----------------------------------------------------------------------------------------
*/
profiles {
    longranger_lsf_sanger { includeConfig 'longranger_lsf_sanger.config' }
    test {
        process {
            // Set up of the scaffolding pipeline
            withName: 'YAHS' {
                // Skip the initial assembly error correction step
                ext.args = '-r 1000,2000,5000'
            }

            withName: '.*HIFIASM.*' {
                // Skip bloom filter
                ext.args = '--primary -f0'
            }

            withName: '.*OATK' {
                // Set kmer size and minimal coverage
                ext.args = "-k1001 -c5 -Ttmp"
            }
        }
    }

    test_github {
        process {
            // Set up of the scaffolding pipeline
            withName: 'YAHS' {
                // Skip the initial assembly error correction step
                ext.args = '-r 1000,2000,5000'
            }

            withName: '.*HIFIASM.*' {
                // Skip bloom filter
                ext.args = '--primary -f0'
            }

            withName: '.*OATK' {
                // Set kmer size and minimal coverage
                ext.args = "-k1001 -c5 -Ttmp"
            }

            if (params.polishing_on) {
                withName: LONGRANGER_MKREF {
                    container = "ghcr.io/sanger-tol/longranger:2.2.2-c4"
                }
                withName: LONGRANGER_ALIGN {
                    container = "ghcr.io/sanger-tol/longranger:2.2.2-c4"
                }
            }
        }
    }
}
